// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CouponObjectCouponTypeEnum - Coupon type
type CouponObjectCouponTypeEnum string

const (
	CouponObjectCouponTypeEnumFixedAmount CouponObjectCouponTypeEnum = "fixed_amount"
	CouponObjectCouponTypeEnumPercentage  CouponObjectCouponTypeEnum = "percentage"
)

func (e CouponObjectCouponTypeEnum) ToPointer() *CouponObjectCouponTypeEnum {
	return &e
}

func (e *CouponObjectCouponTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_amount":
		fallthrough
	case "percentage":
		*e = CouponObjectCouponTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponObjectCouponTypeEnum: %v", v)
	}
}

// CouponObjectExpirationEnum - Expiration type
type CouponObjectExpirationEnum string

const (
	CouponObjectExpirationEnumNoExpiration CouponObjectExpirationEnum = "no_expiration"
	CouponObjectExpirationEnumTimeLimit    CouponObjectExpirationEnum = "time_limit"
)

func (e CouponObjectExpirationEnum) ToPointer() *CouponObjectExpirationEnum {
	return &e
}

func (e *CouponObjectExpirationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "no_expiration":
		fallthrough
	case "time_limit":
		*e = CouponObjectExpirationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponObjectExpirationEnum: %v", v)
	}
}

// CouponObjectFrequencyEnum - Frequency type
type CouponObjectFrequencyEnum string

const (
	CouponObjectFrequencyEnumOnce      CouponObjectFrequencyEnum = "once"
	CouponObjectFrequencyEnumRecurring CouponObjectFrequencyEnum = "recurring"
)

func (e CouponObjectFrequencyEnum) ToPointer() *CouponObjectFrequencyEnum {
	return &e
}

func (e *CouponObjectFrequencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "once":
		fallthrough
	case "recurring":
		*e = CouponObjectFrequencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponObjectFrequencyEnum: %v", v)
	}
}

type CouponObject struct {
	AmountCents    *int64  `json:"amount_cents,omitempty"`
	AmountCurrency *string `json:"amount_currency,omitempty"`
	Code           string  `json:"code"`
	// Coupon type
	CouponType CouponObjectCouponTypeEnum `json:"coupon_type"`
	CreatedAt  time.Time                  `json:"created_at"`
	// Expiration type
	Expiration   CouponObjectExpirationEnum `json:"expiration"`
	ExpirationAt *time.Time                 `json:"expiration_at,omitempty"`
	// Frequency type
	Frequency         CouponObjectFrequencyEnum `json:"frequency"`
	FrequencyDuration *int64                    `json:"frequency_duration,omitempty"`
	LagoID            string                    `json:"lago_id"`
	LimitedPlans      *bool                     `json:"limited_plans,omitempty"`
	Name              string                    `json:"name"`
	PercentageRate    *float64                  `json:"percentage_rate,omitempty"`
	PlanCodes         []string                  `json:"plan_codes,omitempty"`
	Reusable          *bool                     `json:"reusable,omitempty"`
}
