// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreditNoteObjectCreditStatusEnum - Credit status
type CreditNoteObjectCreditStatusEnum string

const (
	CreditNoteObjectCreditStatusEnumAvailable CreditNoteObjectCreditStatusEnum = "available"
	CreditNoteObjectCreditStatusEnumConsumed  CreditNoteObjectCreditStatusEnum = "consumed"
	CreditNoteObjectCreditStatusEnumVoided    CreditNoteObjectCreditStatusEnum = "voided"
)

func (e CreditNoteObjectCreditStatusEnum) ToPointer() *CreditNoteObjectCreditStatusEnum {
	return &e
}

func (e *CreditNoteObjectCreditStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "consumed":
		fallthrough
	case "voided":
		*e = CreditNoteObjectCreditStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteObjectCreditStatusEnum: %v", v)
	}
}

// CreditNoteObjectReasonEnum - Reason
type CreditNoteObjectReasonEnum string

const (
	CreditNoteObjectReasonEnumDuplicatedCharge      CreditNoteObjectReasonEnum = "duplicated_charge"
	CreditNoteObjectReasonEnumProductUnsatisfactory CreditNoteObjectReasonEnum = "product_unsatisfactory"
	CreditNoteObjectReasonEnumOrderChange           CreditNoteObjectReasonEnum = "order_change"
	CreditNoteObjectReasonEnumOrderCancellation     CreditNoteObjectReasonEnum = "order_cancellation"
	CreditNoteObjectReasonEnumFraudulentCharge      CreditNoteObjectReasonEnum = "fraudulent_charge"
	CreditNoteObjectReasonEnumOther                 CreditNoteObjectReasonEnum = "other"
)

func (e CreditNoteObjectReasonEnum) ToPointer() *CreditNoteObjectReasonEnum {
	return &e
}

func (e *CreditNoteObjectReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "duplicated_charge":
		fallthrough
	case "product_unsatisfactory":
		fallthrough
	case "order_change":
		fallthrough
	case "order_cancellation":
		fallthrough
	case "fraudulent_charge":
		fallthrough
	case "other":
		*e = CreditNoteObjectReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteObjectReasonEnum: %v", v)
	}
}

// CreditNoteObjectRefundStatusEnum - Refund status
type CreditNoteObjectRefundStatusEnum string

const (
	CreditNoteObjectRefundStatusEnumPending   CreditNoteObjectRefundStatusEnum = "pending"
	CreditNoteObjectRefundStatusEnumSucceeded CreditNoteObjectRefundStatusEnum = "succeeded"
	CreditNoteObjectRefundStatusEnumFailed    CreditNoteObjectRefundStatusEnum = "failed"
)

func (e CreditNoteObjectRefundStatusEnum) ToPointer() *CreditNoteObjectRefundStatusEnum {
	return &e
}

func (e *CreditNoteObjectRefundStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		*e = CreditNoteObjectRefundStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreditNoteObjectRefundStatusEnum: %v", v)
	}
}

type CreditNoteObject struct {
	BalanceAmountCents    int64     `json:"balance_amount_cents"`
	BalanceAmountCurrency string    `json:"balance_amount_currency"`
	CreatedAt             time.Time `json:"created_at"`
	CreditAmountCents     int64     `json:"credit_amount_cents"`
	CreditAmountCurrency  string    `json:"credit_amount_currency"`
	// Credit status
	CreditStatus  *CreditNoteObjectCreditStatusEnum `json:"credit_status,omitempty"`
	Customer      *CustomerObject                   `json:"customer,omitempty"`
	Description   *string                           `json:"description,omitempty"`
	FileURL       *string                           `json:"file_url,omitempty"`
	InvoiceNumber string                            `json:"invoice_number"`
	IssuingDate   time.Time                         `json:"issuing_date"`
	Items         []CreditNoteItemObject            `json:"items,omitempty"`
	LagoID        string                            `json:"lago_id"`
	LagoInvoiceID string                            `json:"lago_invoice_id"`
	Number        string                            `json:"number"`
	// Reason
	Reason               CreditNoteObjectReasonEnum `json:"reason"`
	RefundAmountCents    int64                      `json:"refund_amount_cents"`
	RefundAmountCurrency string                     `json:"refund_amount_currency"`
	// Refund status
	RefundStatus                      *CreditNoteObjectRefundStatusEnum `json:"refund_status,omitempty"`
	SequentialID                      int64                             `json:"sequential_id"`
	SubTotalVatExcludedAmountCents    int64                             `json:"sub_total_vat_excluded_amount_cents"`
	SubTotalVatExcludedAmountCurrency string                            `json:"sub_total_vat_excluded_amount_currency"`
	TotalAmountCents                  int64                             `json:"total_amount_cents"`
	TotalAmountCurrency               string                            `json:"total_amount_currency"`
	UpdatedAt                         time.Time                         `json:"updated_at"`
	VatAmountCents                    int64                             `json:"vat_amount_cents"`
	VatAmountCurrency                 string                            `json:"vat_amount_currency"`
}
