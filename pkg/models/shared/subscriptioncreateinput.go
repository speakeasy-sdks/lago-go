// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// SubscriptionCreateInputSubscriptionBillingTimeEnum - Billing time
type SubscriptionCreateInputSubscriptionBillingTimeEnum string

const (
	SubscriptionCreateInputSubscriptionBillingTimeEnumCalendar    SubscriptionCreateInputSubscriptionBillingTimeEnum = "calendar"
	SubscriptionCreateInputSubscriptionBillingTimeEnumAnniversary SubscriptionCreateInputSubscriptionBillingTimeEnum = "anniversary"
)

func (e SubscriptionCreateInputSubscriptionBillingTimeEnum) ToPointer() *SubscriptionCreateInputSubscriptionBillingTimeEnum {
	return &e
}

func (e *SubscriptionCreateInputSubscriptionBillingTimeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "calendar":
		fallthrough
	case "anniversary":
		*e = SubscriptionCreateInputSubscriptionBillingTimeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionCreateInputSubscriptionBillingTimeEnum: %v", v)
	}
}

type SubscriptionCreateInputSubscription struct {
	// Billing time
	BillingTime        *SubscriptionCreateInputSubscriptionBillingTimeEnum `json:"billing_time,omitempty"`
	ExternalCustomerID string                                              `json:"external_customer_id"`
	ExternalID         string                                              `json:"external_id"`
	Name               *string                                             `json:"name,omitempty"`
	PlanCode           string                                              `json:"plan_code"`
	SubscriptionAt     *time.Time                                          `json:"subscription_at,omitempty"`
}

// SubscriptionCreateInput - Subscription payload
type SubscriptionCreateInput struct {
	Subscription SubscriptionCreateInputSubscription `json:"subscription"`
}
