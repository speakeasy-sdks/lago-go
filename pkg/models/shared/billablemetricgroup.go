// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type BillableMetricGroupValuesType string

const (
	BillableMetricGroupValuesTypeStr      BillableMetricGroupValuesType = "str"
	BillableMetricGroupValuesTypeMapOfany BillableMetricGroupValuesType = "mapOfany"
)

type BillableMetricGroupValues struct {
	Str      *string
	MapOfany map[string]interface{}

	Type BillableMetricGroupValuesType
}

func CreateBillableMetricGroupValuesStr(str string) BillableMetricGroupValues {
	typ := BillableMetricGroupValuesTypeStr

	return BillableMetricGroupValues{
		Str:  &str,
		Type: typ,
	}
}

func CreateBillableMetricGroupValuesMapOfany(mapOfany map[string]interface{}) BillableMetricGroupValues {
	typ := BillableMetricGroupValuesTypeMapOfany

	return BillableMetricGroupValues{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func (u *BillableMetricGroupValues) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = BillableMetricGroupValuesTypeStr
		return nil
	}

	mapOfany := map[string]interface{}{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mapOfany); err == nil {
		u.MapOfany = mapOfany
		u.Type = BillableMetricGroupValuesTypeMapOfany
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u BillableMetricGroupValues) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.MapOfany != nil {
		return json.Marshal(u.MapOfany)
	}

	return nil, nil
}

type BillableMetricGroup struct {
	Key    string                      `json:"key"`
	Values []BillableMetricGroupValues `json:"values"`
}
