// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChargeUsageObjectBillableMetricAggregationTypeEnum - Aggregation type
type ChargeUsageObjectBillableMetricAggregationTypeEnum string

const (
	ChargeUsageObjectBillableMetricAggregationTypeEnumCountAgg          ChargeUsageObjectBillableMetricAggregationTypeEnum = "count_agg"
	ChargeUsageObjectBillableMetricAggregationTypeEnumSumAgg            ChargeUsageObjectBillableMetricAggregationTypeEnum = "sum_agg"
	ChargeUsageObjectBillableMetricAggregationTypeEnumMaxAgg            ChargeUsageObjectBillableMetricAggregationTypeEnum = "max_agg"
	ChargeUsageObjectBillableMetricAggregationTypeEnumUniqueCountAgg    ChargeUsageObjectBillableMetricAggregationTypeEnum = "unique_count_agg"
	ChargeUsageObjectBillableMetricAggregationTypeEnumRecurringCountAgg ChargeUsageObjectBillableMetricAggregationTypeEnum = "recurring_count_agg"
)

func (e ChargeUsageObjectBillableMetricAggregationTypeEnum) ToPointer() *ChargeUsageObjectBillableMetricAggregationTypeEnum {
	return &e
}

func (e *ChargeUsageObjectBillableMetricAggregationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "count_agg":
		fallthrough
	case "sum_agg":
		fallthrough
	case "max_agg":
		fallthrough
	case "unique_count_agg":
		fallthrough
	case "recurring_count_agg":
		*e = ChargeUsageObjectBillableMetricAggregationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeUsageObjectBillableMetricAggregationTypeEnum: %s", s)
	}
}

type ChargeUsageObjectBillableMetric struct {
	// Aggregation type
	AggregationType *ChargeUsageObjectBillableMetricAggregationTypeEnum `json:"aggregation_type,omitempty"`
	Code            *string                                             `json:"code,omitempty"`
	LagoID          *string                                             `json:"lago_id,omitempty"`
	Name            *string                                             `json:"name,omitempty"`
}

// ChargeUsageObjectChargeChargeModelEnum - Charge model type
type ChargeUsageObjectChargeChargeModelEnum string

const (
	ChargeUsageObjectChargeChargeModelEnumStandard   ChargeUsageObjectChargeChargeModelEnum = "standard"
	ChargeUsageObjectChargeChargeModelEnumGraduated  ChargeUsageObjectChargeChargeModelEnum = "graduated"
	ChargeUsageObjectChargeChargeModelEnumPackage    ChargeUsageObjectChargeChargeModelEnum = "package"
	ChargeUsageObjectChargeChargeModelEnumPercentage ChargeUsageObjectChargeChargeModelEnum = "percentage"
	ChargeUsageObjectChargeChargeModelEnumVolume     ChargeUsageObjectChargeChargeModelEnum = "volume"
)

func (e ChargeUsageObjectChargeChargeModelEnum) ToPointer() *ChargeUsageObjectChargeChargeModelEnum {
	return &e
}

func (e *ChargeUsageObjectChargeChargeModelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "standard":
		fallthrough
	case "graduated":
		fallthrough
	case "package":
		fallthrough
	case "percentage":
		fallthrough
	case "volume":
		*e = ChargeUsageObjectChargeChargeModelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChargeUsageObjectChargeChargeModelEnum: %s", s)
	}
}

type ChargeUsageObjectCharge struct {
	// Charge model type
	ChargeModel *ChargeUsageObjectChargeChargeModelEnum `json:"charge_model,omitempty"`
	Instant     *bool                                   `json:"instant,omitempty"`
	LagoID      *string                                 `json:"lago_id,omitempty"`
}

type ChargeUsageObjectGroups struct {
	AmountCents *int64   `json:"amount_cents,omitempty"`
	Key         *string  `json:"key,omitempty"`
	LagoID      *string  `json:"lago_id,omitempty"`
	Units       *float64 `json:"units,omitempty"`
	Value       *string  `json:"value,omitempty"`
}

type ChargeUsageObject struct {
	AmountCents    int64                           `json:"amount_cents"`
	AmountCurrency string                          `json:"amount_currency"`
	BillableMetric ChargeUsageObjectBillableMetric `json:"billable_metric"`
	Charge         ChargeUsageObjectCharge         `json:"charge"`
	Groups         []ChargeUsageObjectGroups       `json:"groups"`
	Units          float64                         `json:"units"`
}
