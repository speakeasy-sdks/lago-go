// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FeeUpdateInputInvoicePaymentStatusEnum - Status
type FeeUpdateInputInvoicePaymentStatusEnum string

const (
	FeeUpdateInputInvoicePaymentStatusEnumPending   FeeUpdateInputInvoicePaymentStatusEnum = "pending"
	FeeUpdateInputInvoicePaymentStatusEnumSucceeded FeeUpdateInputInvoicePaymentStatusEnum = "succeeded"
	FeeUpdateInputInvoicePaymentStatusEnumFailed    FeeUpdateInputInvoicePaymentStatusEnum = "failed"
	FeeUpdateInputInvoicePaymentStatusEnumRefunded  FeeUpdateInputInvoicePaymentStatusEnum = "refunded"
)

func (e FeeUpdateInputInvoicePaymentStatusEnum) ToPointer() *FeeUpdateInputInvoicePaymentStatusEnum {
	return &e
}

func (e *FeeUpdateInputInvoicePaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "refunded":
		*e = FeeUpdateInputInvoicePaymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FeeUpdateInputInvoicePaymentStatusEnum: %v", v)
	}
}

type FeeUpdateInputInvoice struct {
	// Status
	PaymentStatus FeeUpdateInputInvoicePaymentStatusEnum `json:"payment_status"`
}

// FeeUpdateInput - Payload to update a fee
type FeeUpdateInput struct {
	Invoice FeeUpdateInputInvoice `json:"invoice"`
}
