// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type CouponInputCouponAppliesTo struct {
	PlanCodes []string `json:"plan_codes,omitempty"`
}

// CouponInputCouponCouponTypeEnum - Coupon type
type CouponInputCouponCouponTypeEnum string

const (
	CouponInputCouponCouponTypeEnumFixedAmount CouponInputCouponCouponTypeEnum = "fixed_amount"
	CouponInputCouponCouponTypeEnumPercentage  CouponInputCouponCouponTypeEnum = "percentage"
)

func (e CouponInputCouponCouponTypeEnum) ToPointer() *CouponInputCouponCouponTypeEnum {
	return &e
}

func (e *CouponInputCouponCouponTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fixed_amount":
		fallthrough
	case "percentage":
		*e = CouponInputCouponCouponTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponInputCouponCouponTypeEnum: %s", s)
	}
}

// CouponInputCouponExpirationEnum - Expiration type
type CouponInputCouponExpirationEnum string

const (
	CouponInputCouponExpirationEnumNoExpiration CouponInputCouponExpirationEnum = "no_expiration"
	CouponInputCouponExpirationEnumTimeLimit    CouponInputCouponExpirationEnum = "time_limit"
)

func (e CouponInputCouponExpirationEnum) ToPointer() *CouponInputCouponExpirationEnum {
	return &e
}

func (e *CouponInputCouponExpirationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "no_expiration":
		fallthrough
	case "time_limit":
		*e = CouponInputCouponExpirationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponInputCouponExpirationEnum: %s", s)
	}
}

// CouponInputCouponFrequencyEnum - Frequency type
type CouponInputCouponFrequencyEnum string

const (
	CouponInputCouponFrequencyEnumOnce      CouponInputCouponFrequencyEnum = "once"
	CouponInputCouponFrequencyEnumRecurring CouponInputCouponFrequencyEnum = "recurring"
)

func (e CouponInputCouponFrequencyEnum) ToPointer() *CouponInputCouponFrequencyEnum {
	return &e
}

func (e *CouponInputCouponFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "once":
		fallthrough
	case "recurring":
		*e = CouponInputCouponFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CouponInputCouponFrequencyEnum: %s", s)
	}
}

type CouponInputCoupon struct {
	AmountCents    *int64                      `json:"amount_cents,omitempty"`
	AmountCurrency *string                     `json:"amount_currency,omitempty"`
	AppliesTo      *CouponInputCouponAppliesTo `json:"applies_to,omitempty"`
	Code           *string                     `json:"code,omitempty"`
	// Coupon type
	CouponType *CouponInputCouponCouponTypeEnum `json:"coupon_type,omitempty"`
	// Expiration type
	Expiration   *CouponInputCouponExpirationEnum `json:"expiration,omitempty"`
	ExpirationAt *time.Time                       `json:"expiration_at,omitempty"`
	// Frequency type
	Frequency         *CouponInputCouponFrequencyEnum `json:"frequency,omitempty"`
	FrequencyDuration *int64                          `json:"frequency_duration,omitempty"`
	Name              *string                         `json:"name,omitempty"`
	PercentageRate    *float64                        `json:"percentage_rate,omitempty"`
	Reusable          *bool                           `json:"reusable,omitempty"`
}

// CouponInput - Coupon payload
type CouponInput struct {
	Coupon CouponInputCoupon `json:"coupon"`
}
